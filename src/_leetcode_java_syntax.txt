---------- Data Structures ----------

***** Array *****
char[] <arr> = {'A', 'B', 'C'};
<arr>.length
System.out.println(Arrays.toString(<arr>);

- print nested values (NOTE: reference variables only)
System.out.println(Arrays.deepToString(<arr>);

- slice array
Arrays.copyOfRange(<arr>, startIndex, endIndex);
eg. {1, 2, 3, 4, 5}
  -> middle = <arr>.length / 2;
  -> copyOfRange(<arr>, 0, middle) = {1, 2};
  -> copyOfRange(<arr>, middle, <arr>.length) = {3, 4, 5};

- check value equality
Arrays.equals(<arr1>, <arr2>);

- return array with variables as values
return new int[]{a, b};

***** Array <> List *****
List Arrays.asList(<elems>)
T[] <list>.toArray(new T[0])


***** HashMap *****
int size()
boolean isEmpty()
V put(K k, V v)
V get(Obj k)
boolean containsKey(Obj k)
boolean containsValue(Obj v)
void clear()
Set<K> keySet()
Collection<V> values()
Map.Entry<K, V> entrySet()
for(Map.Entry<Integer, String> pair : hashmap.entrySet()) {
    System.out.println(pair.getKey() + " -> " + pair.getValue());
}


***** HashSet *****
int size()
boolean isEmpty()
boolean add(E e)
boolean cointains(Obj o)
boolean remove(Obj o)
void clear()
T[] toArray(T[] a)
- init hashset with values
HashSet<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u'));


---------- Primitives and Conversions ----------

***** Char *****
- get alphabets
int offset = 65;
char[] alphabets = new int[26];
for (int i = 0; i < 26; i++) {
  alphabets[i] = (char) (i + offset);
}


***** Digits *****
int digit = Character.digit(Integer.toString(<num>).charAt(<idx>)), 10);
